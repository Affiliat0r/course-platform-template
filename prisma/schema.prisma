// Prisma Schema for Course Platform
// Database: PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String? // Hashed password for email/password auth
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  progress      Progress[]
  reviews       Review[]

  @@map("users")
}

// NextAuth.js Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session model
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken model
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Course model
model Course {
  id               String   @id @default(cuid())
  slug             String   @unique
  title            String
  description      String
  longDescription  String?  @db.Text
  price            Float
  currency         String   @default("USD")
  thumbnailUrl     String?
  previewVideoUrl  String?
  status           CourseStatus @default(DRAFT)
  featured         Boolean  @default(false)
  enrollmentCount  Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  modules      Module[]
  enrollments  Enrollment[]
  reviews      Review[]

  @@index([status, featured])
  @@index([slug])
  @@map("courses")
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Module (section within a course)
model Module {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  description String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@index([courseId, order])
  @@map("modules")
}

// Lesson (individual lesson within a module)
model Lesson {
  id          String      @id @default(cuid())
  moduleId    String
  title       String
  slug        String
  content     String?     @db.Text // Markdown or JSON content
  videoUrl    String?
  duration    Int?        // Duration in minutes
  order       Int
  isFree      Boolean     @default(false) // Preview lessons
  lessonType  LessonType  @default(VIDEO)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  module   Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress Progress[]

  @@unique([moduleId, slug])
  @@index([moduleId, order])
  @@map("lessons")
}

enum LessonType {
  VIDEO
  TEXT
  QUIZ
  PROJECT
}

// Enrollment (user enrolled in a course)
model Enrollment {
  id          String           @id @default(cuid())
  userId      String
  courseId    String
  status      EnrollmentStatus @default(ACTIVE)
  progress    Int              @default(0) // Percentage (0-100)
  enrolledAt  DateTime         @default(now())
  completedAt DateTime?
  expiresAt   DateTime?        // For subscription-based access

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payment Payment?

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@map("enrollments")
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

// Progress (user progress on individual lessons)
model Progress {
  id          String    @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@map("progress")
}

// Payment (Stripe payment records)
model Payment {
  id                       String        @id @default(cuid())
  enrollmentId             String        @unique
  userId                   String
  courseId                 String
  stripeCheckoutSessionId  String?       @unique
  stripePaymentIntentId    String?       @unique
  stripeCustomerId         String?
  amount                   Float
  currency                 String        @default("USD")
  status                   PaymentStatus @default(PENDING)
  createdAt                DateTime      @default(now())
  completedAt              DateTime?

  // Relations
  enrollment Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([stripeCheckoutSessionId])
  @@map("payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

// Review (course reviews by users)
model Review {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId]) // One review per user per course
  @@index([courseId])
  @@map("reviews")
}
